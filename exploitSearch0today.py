#!/usr/bin/python
#-*-coding:utf-8-*-
#- exploit-finder Class

#- Copyright (C) 2015 GoldraK & Roger Serentill
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>


"""Exploit finder for web 0day.today"""

__author__ 		= "GoldraK & Roger Serentill & Carlos A. Molina"
__credits__ 	= "GoldraK & Roger Serentill & Carlos A. Molina"
__version__ 	= "0.1.1"
__maintainer__ 	= "GoldraK & Roger Serentill & Carlos A. Molina"
__email__ 		= "goldrak@gmail.com, hello@rogerserentill.com, carlosantmolina@gmail.com"
__status__ 		= "Development"

import sys, re, os.path
from teco import color, style
from bs4 import BeautifulSoup # work with html content
import mechanize # click button and search
sys.path.append('exploits')

class exploitSearch0today:

	def __init__(self):
		self.save_path = 'modules/exploit-finder/exploits'  # where save files

	def saveInFile(self, what2save, fileName):
		filePathAndName = os.path.join(self.save_path, fileName)
		try:
			what2save = str(what2save)
		except:
			what2save = str(what2save.encode('utf-8')) #  avoid error UnicodeEncodeError: 'ascii' codec can't encode character ... in position ...: ordinal not in range(128)
		file = open(filePathAndName,'w') # create file
		file.write(what2save)	# write information in file
		file.close()
		print color('cyan', 'Exploit downloaded')

	def connectionElements(self, soup):
		exploitsH3 = soup.find_all("h3") # find specifed tags.
		exploitsID0today, exploitsName = self.getExploitIDandName(exploitsH3)
		exploitsAreFree = self.searchExploitsAreFree(soup)
		exploitDict = self.getDictionary(exploitsID0today, exploitsName, exploitsAreFree)
		return exploitDict

	def searchExploitsAreFree(self, soup):
		exploitIsFree = []
		webPageInfo = soup.find_all('div', {'class':'td allow_tip'})
		for informationPart in webPageInfo: # information part, type: bs4.element.Tag
			if '<div class="tips_price_0">You can open this exploit for free</div>' in str(informationPart):
				exploitIsFree.append('free')
			elif '<div class="GoldText" style="display:inline-block;position:relative; top:0px;">' in str(informationPart):
				exploitIsFree.append('no free')
		return exploitIsFree

	def getDictionary(self, dictKey, dictTerm1, dictTerm2):
		# inputs: type list
		newDictionary = {}
		if len(dictKey) == len(dictTerm1) and len(dictTerm1) == len(dictTerm2):
			for i in range(len(dictKey)):
				newDictionary[dictKey[i]] = [dictTerm1[i], dictTerm2[i]] # id:name,is_free
			return newDictionary
		else:
			return -1

	def getExploitIDandName(self, exploitsH3):
		# ID of the exploit is given by 0day.today web
		# exploitsHref: bs4.element.ResultSet e.g.: <h3><a href="/exploit/description/23605">Wordpress RevSlider File Upload and Execute Vulnerability</a></h3>
		nameList = []
		idList = []
		for exploitH3 in exploitsH3:
			exploitH3a = str(exploitH3.find_all('a')[0])
			idList.append(self.getExploitID0today(exploitH3a)) # type str
			nameList.append(exploitH3.text)
		return idList, nameList

	def getExploitID0today(self, exploitH3a): # type(exploitH3a): string
		if len(re.findall('/description/',exploitH3a)) >= 1 and len(re.findall('">',exploitH3a)) >= 1:
			parts = re.compile('/description/').split(exploitH3a)
			exploitID0today = re.compile('">').split(parts[1])[0] # type: string
			return exploitID0today
		else:
			return 'Error retrieving info'

	def showFreeExploits(self, exploitsInfo):
		#exploitsInfo, type: dict
		if len(exploitsInfo.keys()) != 0:
			exploitsID = exploitsInfo.keys()
			exploitsID = sorted(exploitsID)  # ascendent order
			exploitsFreeID = []
			for exploitID in exploitsID:
				if exploitsInfo[exploitID][1] == 'free':
					exploitsFreeID.append(exploitID)
			if len(exploitsFreeID) != 0:
				for exploitID in exploitsFreeID:
					print exploitsInfo[exploitID][0] + " --> " + color('azul', 'http://0day.today/exploit/' + exploitID) + " - " + color('rojo', 'ID: ' + exploitID)
			else:
				return -1
		else:
			return -1

	def getExploitByID(self, mechanizeBrowser, soup, exploitID):
		# exploitID type:str
		url = 'http://0day.today/exploit/'+exploitID
		results = mechanizeBrowser.open(url) # start connection
		contents = results.read()
		soup = self.getSoup(contents) # in this case is neccesary do it with a method
		body = soup.body
		exploit = body.find("pre", { "class" : "brush:" })
		exploit = exploit.text
		return exploit

	def getSoup(self, contents):
		return BeautifulSoup(contents, "html.parser") # best HTML parser for this system (osx: html.parser, ubuntu: lxml)
		
	def askExploitID(self, exploitsIDavailable):
		exploitID = ""
		while exploitID == '':
			exploitID = raw_input('Type ID >> ')
			if exploitID not in exploitsIDavailable:
				print color('rojo', '\nInvalid Exploit Id\n')
				exploitID = ''
		return exploitID

	def askExploit2search(self):
		new_search = ""
		while new_search == "":
			new_search = raw_input('Find exploit: ')
		return new_search

	def download_exploit(self, browser, contents, exploitsIDavailable):
		download_exploit = ""
		while download_exploit == "":
			download_exploit = raw_input('Download exploit y/n?: ')
		if download_exploit == 'y':
			download_exploit_id = ''
			while download_exploit_id == '':
				download_exploit_id = raw_input('Type the id of explot: ')
				if download_exploit_id in exploitsIDavailable:
					print color('cyan', 'Downloading exploit')
					soup = self.getSoup(contents)
					exploit = self.getExploitByID(browser, soup, download_exploit_id)
					self.saveInFile(exploit, download_exploit_id + '.txt')
				else:
					print color('rojo', '\nInvalid Exploit Id\n')
					download_exploit_id = ''
		elif download_exploit != 'n':
			print color('rojo', '\nInvalid Option\n')
			self.download_exploit(browser, contents, exploitsIDavailable)


	def exploit0toadySearch(self):
		print color('cyan', 'Connecting to website')
		br = mechanize.Browser()
		br.open('http://0day.today') # start connection
		br.select_form(nr=0) # select first form (form without name). Yes I agree button
		br.submit()  # click button
		# new window
		br.select_form(nr=0) # select first form (form without name). Search bar
		br['search_request'] = self.askExploit2search()
		results = br.submit() # launch search
		contents = results.read()
		soup = self.getSoup(contents)
		exploitsInfo = self.connectionElements(soup) # type: dictionary
		if self.showFreeExploits(exploitsInfo) != -1:
			self.download_exploit(br, contents, exploitsInfo.keys())
		else:
			print 'No searchs'