#!/usr/bin/python
#-*-coding:utf-8-*-
#- exploit-finder Class

#- Copyright (C) 2015 GoldraK & Roger Serentill
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>



"""Exploit finder. Connection with module nmap-scan"""

__author__ 		= "GoldraK & Roger Serentill & Carlos A. Molina"
__credits__ 	= "GoldraK & Roger Serentill & Carlos A. Molina"
__version__ 	= "0.1.1"
__maintainer__ 	= "GoldraK & Roger Serentill & Carlos A. Molina"
__email__ 		= "goldrak@gmail.com, hello@rogerserentill.com, carlosantmolina@gmail.com"
__status__ 		= "Development"

import sys
sys.path.append('modules/nmap-scan/model')
from teco import color, style

class WorkWithModuleNmap():

    def __init__(self):
        if self.checkConnectionWithModuleNmapScan()==1:
            from database import Database
            from scan_DB import ScanDB
            from utility_ask import Ask
            from utility_changeHostName import ChangeHostName
            from utility_selectAuditAndRevision import SelectAuditRev
            from utility2 import ChangeFormat
            self.db = Database()
            self.scanDB = ScanDB()
            self.ask = Ask()
            self.cHN = ChangeHostName()
            self.sAR = SelectAuditRev()
            self.cf = ChangeFormat()

    def checkConnectionWithModuleNmapScan(self):
        try:
            from database import Database as db
            return 1
        except:
            return -1

    def selectAuditRev(self):
        print color('bcyan', 'Select audit')
        auditNumber, auditName = self.sAR.selectExistingAudit()
        print color('bcyan', 'Select revision')
        revisionNumber, revisionName = self.sAR.selectExistingRevision(auditNumber)
        return auditNumber, revisionNumber

    def showListPortsIDandPortsNames(self, lastHostID):
        portsNumber4hostID = self.scanDB.getPortsNumber(lastHostID)  # list of one or more integers. Example [80, 21, 22, 23]
        portsOpenID = self.scanDB.getPortsOpenID(lastHostID, portsNumber4hostID) # list of tuples. Example [(1,), (2,), (3,), (4,)]
        if portsOpenID == -1:
            print color('rojo', 'Not scanned ports for this host')
        else:
            portsOpenID = self.cf.eliminateTuplesAtList(portsOpenID) # list or a int
            portsOpenID = self.cf.createList(portsOpenID) # list
            portsOpenNumber = self.db.retrieve_portNumber_byPortsID(self.cf.createTuple(portsOpenID)) # list of tuples. Example [(80,), (21,), (22,), (23,)]
            portsOpenNumber = self.cf.eliminateTuplesAtList(portsOpenNumber)  # list or int
            portsOpenNumber = self.cf.createList(portsOpenNumber) # list
            portsIDandNumber = self.cf.createListOfTuplesFrom2Lists(portsOpenID, portsOpenNumber)
            print color('verde', 'Available ports for this host')
            print color('verde','id   number')
            print color('verde','-----------')
            for portIDandNumber in portsIDandNumber:
                print color('verde', str(portIDandNumber[0])+'.   ' + str(portIDandNumber[1]))
            print '' # blank line
        return portsOpenID # list

    def returnPortInfo(self):
        auditNumber, revisionNumber = self.selectAuditRev()
        lastHostID = self.cHN.selectHostID(auditNumber, revisionNumber)
        portsIDavailableList = self.showListPortsIDandPortsNames(lastHostID)
        if portsIDavailableList != -1:
            portID = self.ask.ask4ListOptionNumber(portsIDavailableList)
            self.scanDB.showPortInfo(portID)
            portVersionDictionary = self.scanDB.getPortVersionAsDictionary(portID)
            if portVersionDictionary['product'] != 'None':
                portInfo = portVersionDictionary['product']
                portInfo = str(portInfo.encode('utf-8'))  # avoid error UnicodeEncodeError: 'ascii' codec can't encode character ... in position ...: ordinal not in range(128)
                return portInfo
            else:
                return -1
        else:
            return -1