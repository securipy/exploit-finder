#!/usr/bin/python
#-*-coding:utf-8-*-
#- exploit-finder helper Class

#- Copyright (C) 2015 GoldraK & Roger Serentill
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>



"""Exploit finder. Connection with module nmap-scan"""

__author__ 		= "GoldraK & Roger Serentill & Carlos A. Molina"
__credits__ 	= "GoldraK & Roger Serentill & Carlos A. Molina"
__version__ 	= "0.1.1"
__maintainer__ 	= "GoldraK & Roger Serentill & Carlos A. Molina"
__email__ 		= "goldrak@gmail.com, hello@rogerserentill.com, carlosantmolina@gmail.com"
__status__ 		= "Development"

import sys
sys.path.append('model')
from teco import color, style

class WorkWithBlackListWords():

    def __init__(self):
        self.save_path = 'modules/exploit-finder'  # where save .txt files
        self.fileBlackWordsName = 'blackWords.txt'
        self.filePathAndName = self.save_path + '/' + self.fileBlackWordsName

    def createFile(self):
        if self.checkFileExists() == -1:
            open(self.filePathAndName, 'w')  # create file
            print color('rojo',"File didn't exist. A new one was created")

    def checkFileExists(self):
        try:
            open(self.filePathAndName, 'r')
            return 1
        except:
            return -1

    def showWords(self):
        print 'Words black list'
        print '-----------------'
        file = open(self.filePathAndName, 'r')
        lines = file.read()
        print lines
        file.close()  # end work with file

    def addWord(self):
        newWord = ''
        while newWord == '':
            newWord = raw_input('Type new word: ')
        file = open(self.filePathAndName, 'a')
        file.write('\n'+newWord)  # write information in file
        file.close()  # end work with file
        print color('cyan', 'Word added')

    def deleteWord(self):
        word2delete = ''
        wordInFile = False
        while word2delete == '':
            word2delete = raw_input('Type word to delete: ')
        file = open(self.filePathAndName, 'r')
        lines = file.readlines() #list
        file.close()
        for line in lines:
            if word2delete in line:
                wordInFile = True
                try:
                    lines.remove(word2delete+'\n')
                except:
                    lines.remove(word2delete) # last word added
        # necessary write words again
        f = open(self.filePathAndName, 'w') # create file
        for line in lines:
            f.write(line)
        f.close()
        if wordInFile == False:
            print color('rojo', 'Word not in file\n')
        else:
            print color('cyan', 'Word deleted')

    def retrieveWords(self):
        file = open(self.filePathAndName, 'r')
        lines = file.read() # one string for each line
        file.close()  # end work with file
        linesList = lines.split('\n')
        return linesList

    def deleteWords2Search(self, info2search):
        words2delete = self.retrieveWords()  # list
        for word2delete in words2delete:
            info2search = info2search.replace(word2delete, "")
        info2search = info2search.strip() # delete white spaces at the beginning and at the end of the string
        return info2search

    def askMenu(self):
        print 'Select option'
        print color('magenta', '1. Repeat search manually')
        print color('magenta', '2. Repeat search without words indicated in ' + str(self.fileBlackWordsName))
        print color('rojo', '0. Exit')
        option = ''
        while option not in ['0','1','2']:
            option = raw_input('Repeat search >> ')
        return option
