#!/usr/bin/python
#-*-coding:utf-8-*-
#- exploit-finder Class

#- Copyright (C) 2015 GoldraK & Roger Serentill
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
# as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. 
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. 
# You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>


"""Exploit finder"""

__author__ 		= "GoldraK & Roger Serentill & Carlos A. Molina"
__credits__ 	= "GoldraK & Roger Serentill & Carlos A. Molina"
__version__ 	= "0.1.1"
__maintainer__ 	= "GoldraK & Roger Serentill & Carlos A. Molina"
__email__ 		= "goldrak@gmail.com, hello@rogerserentill.com, carlosantmolina@gmail.com"
__status__ 		= "Development"

from teco import color, style
from checkPossibilities import CheckPossibilities
from exploitSearchAllWebs import ExploitSearchAllWebs
from exploitSearchDB import ExploitSearchExploitDB
from workWithBlackListWords import WorkWithBlackListWords
import sys

class add(object):


	def __init__(self, output, translate, log, installer, options):
		ckP = CheckPossibilities()
		exploitAll = ExploitSearchAllWebs()
		exploitDB = ExploitSearchExploitDB()
		fw = WorkWithBlackListWords()
		possibilities = ckP.checkAllPossibilities() # dictionary
		if possibilities['0today'] == True:
			from exploitSearch0today import ExploitSearch0today
			exploit0today = ExploitSearch0today()
		if possibilities['nmap'] == True:
			from workWithModuleNmap import WorkWithModuleNmap
			mNmap = WorkWithModuleNmap()
		# Available options in each menu
		optionsMenu = ['Select web for exploits search',
					   'Work with scanned information',
					   'Words black list']
		optionsAvailableMenu = optionsMenu
		optionsWeb = ['www.exploit-db.com',
					   'http://0day.today/',
					   'All webs']
		optionsAvailableWeb = optionsWeb
		optionsOffensiveSecurity=['Update exploit-db database',
								  'Find Exploit']
		optionsAvailableExploitDB = optionsOffensiveSecurity
		optionsFileWords = ['Show words',
							'Add word',
							'Delete word']
		optionsAvailableFileWords = optionsFileWords

		def __menu__():
			if possibilities['nmap'] == False:
				try:
					optionsAvailableMenu.remove('Work with scanned information')
				except:
					pass # removed before
			return showOptions(optionsAvailableMenu) # list

		def menuWebs(portInfo=None):
			if possibilities['0today'] == False:
				try:
					optionsAvailableWeb.remove('http://0day.today/')
				except:
					pass # removed before
			print "Select web"
			sentenciasAvailableWeb = showOptions(optionsAvailableWeb)
			sentencia = raw_input("Web >> ")
			sentencia, sentenciaIsNumber = sentenciaIsInt(sentencia)
			if sentenciaIsNumber == True:
				if sentencia in sentenciasAvailableWeb:
					if sentencia == 0:
						sys.exit()
					elif optionsAvailableWeb[sentencia-1] == optionsWeb[0]:
						menuExploitDB(portInfo)
					elif optionsAvailableWeb[sentencia-1] == optionsWeb[1]:
						exploit0today.askSearchDownload(portInfo)
					elif optionsAvailableWeb[sentencia-1] == optionsWeb[2]:
						exploitAll.askSearchDownload(portInfo, possibilities)
				else:
					ms('notCorrectOption')
			else:
				ms('notCorrectOption')

		def menuFileBlackWords():
			print "Select option"
			sentenciasAvailableFileWord = showOptions(optionsAvailableFileWords)
			sentencia = raw_input("Word list >> ")
			sentencia, sentenciaIsNumber = sentenciaIsInt(sentencia)
			fw.createFile()
			if sentenciaIsNumber == True:
				if sentencia in sentenciasAvailableFileWord:
					if sentencia == 0:
						sys.exit()
					elif optionsAvailableFileWords[sentencia-1] == optionsFileWords[0]:
						fw.showWords()
					elif optionsAvailableFileWords[sentencia-1] == optionsFileWords[1]:
						fw.addWord()
					elif optionsAvailableFileWords[sentencia-1] == optionsFileWords[2]:
						fw.deleteWord()
				else:
					ms('notCorrectOption')
			else:
				ms('notCorrectOption')

		def menuExploitDB(portInfo=None):
			sentenciasAvailableExploitDB = showOptions(optionsAvailableExploitDB)
			sentencia = raw_input("Search Exploit >> ")
			sentencia, sentenciaIsNumber = sentenciaIsInt(sentencia)
			if sentencia in sentenciasAvailableExploitDB:
				if sentenciaIsNumber == True:
					if sentencia == 0:
						sys.exit()
					elif optionsAvailableExploitDB[sentencia-1] == optionsOffensiveSecurity[0]:
						exploitDB.update_database()
					elif optionsAvailableExploitDB[sentencia-1] == optionsOffensiveSecurity[1]:
						exploitDB.askSearchDownload(portInfo)
				else:
					ms('notCorrectOption')
			else:
				ms('notCorrectOption')

		def menuMain(sentenciasAvailableMain):
			sentencia = raw_input("Exploit-finder >> ")
			sentencia, sentenciaIsNumber = sentenciaIsInt(sentencia)
			if sentencia in sentenciasAvailableMain:
				if sentenciaIsNumber == True:
					if sentencia == 0:
						sys.exit()
					elif optionsAvailableMenu[sentencia-1] == optionsMenu[0]:
						menuWebs()
					elif optionsAvailableMenu[sentencia-1] == optionsMenu[1]:
						workWithAudits()
						__menu__()
					elif optionsAvailableMenu[sentencia-1] == optionsMenu[2]:
						menuFileBlackWords()
			elif sentencia == 'exit':
				sys.exit()
			elif sentencia == 'version':
				output.default(help.version())
			elif sentencia == 'help':
				output.default(help.help())
			elif sentencia == 'menu':
				__menu__()
			else:
				ms('notCorrectOption')

		def showOptions(optionsList):
			indexesAvailable = [0]
			for index,option in enumerate(optionsList):
				index += 1 # index 0 is Exit
				print color('magenta', str(index)+'. '+option)
				indexesAvailable.append(index)
			print color('rojo', '0. Exit')
			return indexesAvailable

		def sentenciaIsInt(sentencia):
			try:
				sentencia = int(sentencia)
				sentenciaIsNumber = True
			except:
				sentenciaIsNumber = False
			return sentencia, sentenciaIsNumber

		def ms(option):
			if (option == 'all' or option == 'no0today') and possibilities['0today']==False:
				print color('rojo', 'Warning. 0day.today website not allowed. Check installations: BeautifulSoup, mechanize')
			if option == 'notCorrectOption' :
				output.default('Not correct option was selected')

		def workWithAudits():
			portInfoVersionProduct = mNmap.returnPortInfo()
			if portInfoVersionProduct != -1:
				menuWebs(portInfoVersionProduct)
			else:
				print color('rojo','No useful information for automatic search\n')

		ms('all')
		sentenciasAvailableMain = __menu__()
		control = True
		while control == True:
			options.set_completer(help.complete)
			menuMain(sentenciasAvailableMain)


class help(object):
	#- Commands default
	@staticmethod
	def complete(text, state):
		possibilities = ["exit", "version", "help"]
		results = [x for x in possibilities if x.startswith(text)] + [None]
		return results[state]

	#- Help for menu
	@staticmethod
	def help(translate=''):
		return "Help Module"

	@staticmethod
	def version(translate=''):
		return "Version 0.1.1"

	@staticmethod
	#- @translate.[option](init('nameTranslate')) -> initializes the translation file
	def info(translate):
		return 'This module is created to search exploit in exploit-db'

	@staticmethod
	#- Especificamos si necesita el modulo paquetes adicionales.
	def package():
		#- List of extra dependencies needed by the module
		additionalPackage = []
		return additionalPackage
